diff --git a/node_modules/tui-image-editor/dist/tui-image-editor.js b/node_modules/tui-image-editor/dist/tui-image-editor.js
index 31df16d..c151a9e 100644
--- a/node_modules/tui-image-editor/dist/tui-image-editor.js
+++ b/node_modules/tui-image-editor/dist/tui-image-editor.js
@@ -1503,7 +1503,7 @@ eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});
 /***/ (function(module, exports, __webpack_require__) {
 
 "use strict";
-eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(/*! ../util */ \"./src/js/util.js\");\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _colorpicker = __webpack_require__(/*! ./tools/colorpicker */ \"./src/js/ui/tools/colorpicker.js\");\n\nvar _colorpicker2 = _interopRequireDefault(_colorpicker);\n\nvar _range = __webpack_require__(/*! ./tools/range */ \"./src/js/ui/tools/range.js\");\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _submenuBase = __webpack_require__(/*! ./submenuBase */ \"./src/js/ui/submenuBase.js\");\n\nvar _submenuBase2 = _interopRequireDefault(_submenuBase);\n\nvar _draw = __webpack_require__(/*! ./template/submenu/draw */ \"./src/js/ui/template/submenu/draw.js\");\n\nvar _draw2 = _interopRequireDefault(_draw);\n\nvar _consts = __webpack_require__(/*! ../consts */ \"./src/js/consts.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DRAW_OPACITY = 0.7;\n\n/**\n * Draw ui class\n * @class\n * @ignore\n */\n\nvar Draw = function (_Submenu) {\n    _inherits(Draw, _Submenu);\n\n    function Draw(subMenuElement, _ref) {\n        var locale = _ref.locale,\n            iconStyle = _ref.iconStyle,\n            menuBarPosition = _ref.menuBarPosition,\n            usageStatistics = _ref.usageStatistics;\n\n        _classCallCheck(this, Draw);\n\n        var _this = _possibleConstructorReturn(this, (Draw.__proto__ || Object.getPrototypeOf(Draw)).call(this, subMenuElement, {\n            locale: locale,\n            name: 'draw',\n            iconStyle: iconStyle,\n            menuBarPosition: menuBarPosition,\n            templateHtml: _draw2.default,\n            usageStatistics: usageStatistics\n        }));\n\n        _this._els = {\n            lineSelectButton: _this.selector('.tie-draw-line-select-button'),\n            drawColorpicker: new _colorpicker2.default(_this.selector('.tie-draw-color'), '#00a9ff', _this.toggleDirection, _this.usageStatistics),\n            drawRange: new _range2.default({\n                slider: _this.selector('.tie-draw-range'),\n                input: _this.selector('.tie-draw-range-value')\n            }, _consts.defaultDrawRangeValus)\n        };\n\n        _this.type = null;\n        _this.color = _this._els.drawColorpicker.color;\n        _this.width = _this._els.drawRange.value;\n        return _this;\n    }\n\n    /**\n     * Add event for draw\n     * @param {Object} actions - actions for crop\n     *   @param {Function} actions.setDrawMode - set draw mode\n     */\n\n\n    _createClass(Draw, [{\n        key: 'addEvent',\n        value: function addEvent(actions) {\n            this.actions = actions;\n\n            this._els.lineSelectButton.addEventListener('click', this._changeDrawType.bind(this));\n            this._els.drawColorpicker.on('change', this._changeDrawColor.bind(this));\n            this._els.drawRange.on('change', this._changeDrawRange.bind(this));\n        }\n\n        /**\n         * set draw mode - action runner\n         */\n\n    }, {\n        key: 'setDrawMode',\n        value: function setDrawMode() {\n            this.actions.setDrawMode(this.type, {\n                width: this.width,\n                color: _util2.default.getRgb(this.color, DRAW_OPACITY)\n            });\n        }\n\n        /**\n         * Returns the menu to its default state.\n         */\n\n    }, {\n        key: 'changeStandbyMode',\n        value: function changeStandbyMode() {\n            this.type = null;\n            this.actions.stopDrawingMode();\n            this.actions.changeSelectableAll(true);\n            this._els.lineSelectButton.classList.remove('free');\n            this._els.lineSelectButton.classList.remove('line');\n        }\n\n        /**\n         * Executed when the menu starts.\n         */\n\n    }, {\n        key: 'changeStartMode',\n        value: function changeStartMode() {\n            this.type = 'free';\n            this._els.lineSelectButton.classList.add('free');\n            this.setDrawMode();\n        }\n\n        /**\n         * Change draw type event\n         * @param {object} event - line select event\n         * @private\n         */\n\n    }, {\n        key: '_changeDrawType',\n        value: function _changeDrawType(event) {\n            var button = event.target.closest('.tui-image-editor-button');\n            if (button) {\n                var lineType = this.getButtonType(button, ['free', 'line']);\n                this.actions.discardSelection();\n\n                if (this.type === lineType) {\n                    this.changeStandbyMode();\n\n                    return;\n                }\n\n                this.changeStandbyMode();\n                this.type = lineType;\n                this._els.lineSelectButton.classList.add(lineType);\n                this.setDrawMode();\n            }\n        }\n\n        /**\n         * Change drawing color\n         * @param {string} color - select drawing color\n         * @private\n         */\n\n    }, {\n        key: '_changeDrawColor',\n        value: function _changeDrawColor(color) {\n            this.color = color || 'transparent';\n            if (!this.type) {\n                this.changeStartMode();\n            } else {\n                this.setDrawMode();\n            }\n        }\n\n        /**\n         * Change drawing Range\n         * @param {number} value - select drawing range\n         * @private\n         */\n\n    }, {\n        key: '_changeDrawRange',\n        value: function _changeDrawRange(value) {\n            this.width = value;\n            if (!this.type) {\n                this.changeStartMode();\n            } else {\n                this.setDrawMode();\n            }\n        }\n    }]);\n\n    return Draw;\n}(_submenuBase2.default);\n\nexports.default = Draw;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/draw.js?");
+eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(/*! ../util */ \"./src/js/util.js\");\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _colorpicker = __webpack_require__(/*! ./tools/colorpicker */ \"./src/js/ui/tools/colorpicker.js\");\n\nvar _colorpicker2 = _interopRequireDefault(_colorpicker);\n\nvar _range = __webpack_require__(/*! ./tools/range */ \"./src/js/ui/tools/range.js\");\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _submenuBase = __webpack_require__(/*! ./submenuBase */ \"./src/js/ui/submenuBase.js\");\n\nvar _submenuBase2 = _interopRequireDefault(_submenuBase);\n\nvar _draw = __webpack_require__(/*! ./template/submenu/draw */ \"./src/js/ui/template/submenu/draw.js\");\n\nvar _draw2 = _interopRequireDefault(_draw);\n\nvar _consts = __webpack_require__(/*! ../consts */ \"./src/js/consts.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DRAW_OPACITY = 1.0;\n\n/**\n * Draw ui class\n * @class\n * @ignore\n */\n\nvar Draw = function (_Submenu) {\n    _inherits(Draw, _Submenu);\n\n    function Draw(subMenuElement, _ref) {\n        var locale = _ref.locale,\n            iconStyle = _ref.iconStyle,\n            menuBarPosition = _ref.menuBarPosition,\n            usageStatistics = _ref.usageStatistics;\n\n        _classCallCheck(this, Draw);\n\n        var _this = _possibleConstructorReturn(this, (Draw.__proto__ || Object.getPrototypeOf(Draw)).call(this, subMenuElement, {\n            locale: locale,\n            name: 'draw',\n            iconStyle: iconStyle,\n            menuBarPosition: menuBarPosition,\n            templateHtml: _draw2.default,\n            usageStatistics: usageStatistics\n        }));\n\n        _this._els = {\n            lineSelectButton: _this.selector('.tie-draw-line-select-button'),\n            drawColorpicker: new _colorpicker2.default(_this.selector('.tie-draw-color'), '#00FF00', _this.toggleDirection, _this.usageStatistics),\n            drawRange: new _range2.default({\n                slider: _this.selector('.tie-draw-range'),\n                input: _this.selector('.tie-draw-range-value')\n            }, _consts.defaultDrawRangeValus)\n        };\n\n        _this.type = null;\n        _this.color = _this._els.drawColorpicker.color;\n        _this.width = _this._els.drawRange.value;\n        return _this;\n    }\n\n    /**\n     * Add event for draw\n     * @param {Object} actions - actions for crop\n     *   @param {Function} actions.setDrawMode - set draw mode\n     */\n\n\n    _createClass(Draw, [{\n        key: 'addEvent',\n        value: function addEvent(actions) {\n            this.actions = actions;\n\n            this._els.lineSelectButton.addEventListener('click', this._changeDrawType.bind(this));\n            this._els.drawColorpicker.on('change', this._changeDrawColor.bind(this));\n            this._els.drawRange.on('change', this._changeDrawRange.bind(this));\n        }\n\n        /**\n         * set draw mode - action runner\n         */\n\n    }, {\n        key: 'setDrawMode',\n        value: function setDrawMode() {\n            this.actions.setDrawMode(this.type, {\n                width: this.width,\n                color: _util2.default.getRgb(this.color, DRAW_OPACITY)\n            });\n        }\n\n        /**\n         * Returns the menu to its default state.\n         */\n\n    }, {\n        key: 'changeStandbyMode',\n        value: function changeStandbyMode() {\n            this.type = null;\n            this.actions.stopDrawingMode();\n            this.actions.changeSelectableAll(true);\n            this._els.lineSelectButton.classList.remove('free');\n            this._els.lineSelectButton.classList.remove('line');\n        }\n\n        /**\n         * Executed when the menu starts.\n         */\n\n    }, {\n        key: 'changeStartMode',\n        value: function changeStartMode() {\n            this.type = 'free';\n            this._els.lineSelectButton.classList.add('free');\n            this.setDrawMode();\n        }\n\n        /**\n         * Change draw type event\n         * @param {object} event - line select event\n         * @private\n         */\n\n    }, {\n        key: '_changeDrawType',\n        value: function _changeDrawType(event) {\n            var button = event.target.closest('.tui-image-editor-button');\n            if (button) {\n                var lineType = this.getButtonType(button, ['free', 'line']);\n                this.actions.discardSelection();\n\n                if (this.type === lineType) {\n                    this.changeStandbyMode();\n\n                    return;\n                }\n\n                this.changeStandbyMode();\n                this.type = lineType;\n                this._els.lineSelectButton.classList.add(lineType);\n                this.setDrawMode();\n            }\n        }\n\n        /**\n         * Change drawing color\n         * @param {string} color - select drawing color\n         * @private\n         */\n\n    }, {\n        key: '_changeDrawColor',\n        value: function _changeDrawColor(color) {\n            this.color = color || 'transparent';\n            if (!this.type) {\n                this.changeStartMode();\n            } else {\n                this.setDrawMode();\n            }\n        }\n\n        /**\n         * Change drawing Range\n         * @param {number} value - select drawing range\n         * @private\n         */\n\n    }, {\n        key: '_changeDrawRange',\n        value: function _changeDrawRange(value) {\n            this.width = value;\n            if (!this.type) {\n                this.changeStartMode();\n            } else {\n                this.setDrawMode();\n            }\n        }\n    }]);\n\n    return Draw;\n}(_submenuBase2.default);\n\nexports.default = Draw;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/draw.js?");
 
 /***/ }),
 
@@ -1791,7 +1791,7 @@ eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});
 /***/ (function(module, exports, __webpack_require__) {
 
 "use strict";
-eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tuiCodeSnippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\nvar _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);\n\nvar _tuiColorPicker = __webpack_require__(/*! tui-color-picker */ \"tui-color-picker\");\n\nvar _tuiColorPicker2 = _interopRequireDefault(_tuiColorPicker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PICKER_COLOR = ['#000000', '#2a2a2a', '#545454', '#7e7e7e', '#a8a8a8', '#d2d2d2', '#ffffff', '', '#ff4040', '#ff6518', '#ffbb3b', '#03bd9e', '#00a9ff', '#515ce6', '#9e5fff', '#ff5583'];\n\n/**\n * Colorpicker control class\n * @class\n * @ignore\n */\n\nvar Colorpicker = function () {\n    function Colorpicker(colorpickerElement) {\n        var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#7e7e7e';\n        var toggleDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'up';\n        var usageStatistics = arguments[3];\n\n        _classCallCheck(this, Colorpicker);\n\n        var title = colorpickerElement.getAttribute('title');\n        this.usageStatistics = usageStatistics;\n\n        this._show = false;\n\n        this._colorpickerElement = colorpickerElement;\n        this._toggleDirection = toggleDirection;\n        this._makePickerButtonElement(colorpickerElement, defaultColor);\n        this._makePickerLayerElement(colorpickerElement, title);\n        this._color = defaultColor;\n        this.picker = _tuiColorPicker2.default.create({\n            container: this.pickerElement,\n            preset: PICKER_COLOR,\n            color: defaultColor,\n            usageStatistics: this.usageStatistics\n        });\n\n        this._addEvent(colorpickerElement);\n    }\n\n    /**\n     * Get color\n     * @returns {Number} color value\n     */\n\n\n    _createClass(Colorpicker, [{\n        key: '_changeColorElement',\n\n\n        /**\n         * Change color element\n         * @param {string} color color value\n         * #private\n         */\n        value: function _changeColorElement(color) {\n            if (color) {\n                this.colorElement.classList.remove('transparent');\n                this.colorElement.style.backgroundColor = color;\n            } else {\n                this.colorElement.style.backgroundColor = '#fff';\n                this.colorElement.classList.add('transparent');\n            }\n        }\n\n        /**\n         * Make picker button element\n         * @param {HTMLElement} colorpickerElement color picker element\n         * @param {string} defaultColor color value\n         * @private\n         */\n\n    }, {\n        key: '_makePickerButtonElement',\n        value: function _makePickerButtonElement(colorpickerElement, defaultColor) {\n            colorpickerElement.classList.add('tui-image-editor-button');\n\n            this.colorElement = document.createElement('div');\n            this.colorElement.className = 'color-picker-value';\n            if (defaultColor) {\n                this.colorElement.style.backgroundColor = defaultColor;\n            } else {\n                this.colorElement.classList.add('transparent');\n            }\n        }\n\n        /**\n         * Make picker layer element\n         * @param {HTMLElement} colorpickerElement color picker element\n         * @param {string} title picker title\n         * @private\n         */\n\n    }, {\n        key: '_makePickerLayerElement',\n        value: function _makePickerLayerElement(colorpickerElement, title) {\n            var label = document.createElement('label');\n            var triangle = document.createElement('div');\n\n            this.pickerControl = document.createElement('div');\n            this.pickerControl.className = 'color-picker-control';\n\n            this.pickerElement = document.createElement('div');\n            this.pickerElement.className = 'color-picker';\n\n            label.innerHTML = title;\n            triangle.className = 'triangle';\n\n            this.pickerControl.appendChild(this.pickerElement);\n            this.pickerControl.appendChild(triangle);\n\n            colorpickerElement.appendChild(this.pickerControl);\n            colorpickerElement.appendChild(this.colorElement);\n            colorpickerElement.appendChild(label);\n        }\n\n        /**\n         * Add event\n         * @param {HTMLElement} colorpickerElement color picker element\n         * @private\n         */\n\n    }, {\n        key: '_addEvent',\n        value: function _addEvent(colorpickerElement) {\n            var _this = this;\n\n            this.picker.on('selectColor', function (value) {\n                _this._changeColorElement(value.color);\n                _this._color = value.color;\n                _this.fire('change', value.color);\n            });\n            colorpickerElement.addEventListener('click', function (event) {\n                var target = event.target;\n\n                var isInPickerControl = target && _this._isElementInColorPickerControl(target);\n\n                if (!isInPickerControl || isInPickerControl && _this._isPaletteButton(target)) {\n                    _this._show = !_this._show;\n                    _this.pickerControl.style.display = _this._show ? 'block' : 'none';\n                    _this._setPickerControlPosition();\n                    _this.fire('changeShow', _this);\n                }\n                event.stopPropagation();\n            });\n            document.body.addEventListener('click', function () {\n                _this.hide();\n            });\n        }\n\n        /**\n         * Check hex input or not\n         * @param {Element} target - Event target element\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isPaletteButton',\n        value: function _isPaletteButton(target) {\n            return target.className === 'tui-colorpicker-palette-button';\n        }\n\n        /**\n         * Check given element is in pickerControl element\n         * @param {Element} element - element to check\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isElementInColorPickerControl',\n        value: function _isElementInColorPickerControl(element) {\n            var parentNode = element;\n\n            while (parentNode !== document.body) {\n                if (!parentNode) {\n                    break;\n                }\n\n                if (parentNode === this.pickerControl) {\n                    return true;\n                }\n\n                parentNode = parentNode.parentNode;\n            }\n\n            return false;\n        }\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this._show = false;\n            this.pickerControl.style.display = 'none';\n        }\n\n        /**\n         * Set picker control position\n         * @private\n         */\n\n    }, {\n        key: '_setPickerControlPosition',\n        value: function _setPickerControlPosition() {\n            var controlStyle = this.pickerControl.style;\n            var halfPickerWidth = this._colorpickerElement.clientWidth / 2 + 2;\n            var left = this.pickerControl.offsetWidth / 2 - halfPickerWidth;\n            var top = (this.pickerControl.offsetHeight + 10) * -1;\n\n            if (this._toggleDirection === 'down') {\n                top = 30;\n            }\n\n            controlStyle.top = top + 'px';\n            controlStyle.left = '-' + left + 'px';\n        }\n    }, {\n        key: 'color',\n        get: function get() {\n            return this._color;\n        }\n\n        /**\n         * Set color\n         * @param {string} color color value\n         */\n        ,\n        set: function set(color) {\n            this._color = color;\n            this._changeColorElement(color);\n        }\n    }]);\n\n    return Colorpicker;\n}();\n\n_tuiCodeSnippet2.default.CustomEvents.mixin(Colorpicker);\nexports.default = Colorpicker;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/tools/colorpicker.js?");
+eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tuiCodeSnippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\nvar _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);\n\nvar _tuiColorPicker = __webpack_require__(/*! tui-color-picker */ \"tui-color-picker\");\n\nvar _tuiColorPicker2 = _interopRequireDefault(_tuiColorPicker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PICKER_COLOR = ['#00FF00', '#00CD00', '#FF0000', '#FFFFFF', '#0000FF', '#646464', '', '#000000', '#2a2a2a', '#545454', '#7e7e7e', '#a8a8a8', '#d2d2d2', '#ffffff', '#ff4040', '#ff6518', '#ffbb3b', '#03bd9e', '#00a9ff', '#515ce6', '#9e5fff', '#ff5583'];\n\n/**\n * Colorpicker control class\n * @class\n * @ignore\n */\n\nvar Colorpicker = function () {\n    function Colorpicker(colorpickerElement) {\n        var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#7e7e7e';\n        var toggleDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'up';\n        var usageStatistics = arguments[3];\n\n        _classCallCheck(this, Colorpicker);\n\n        var title = colorpickerElement.getAttribute('title');\n        this.usageStatistics = usageStatistics;\n\n        this._show = false;\n\n        this._colorpickerElement = colorpickerElement;\n        this._toggleDirection = toggleDirection;\n        this._makePickerButtonElement(colorpickerElement, defaultColor);\n        this._makePickerLayerElement(colorpickerElement, title);\n        this._color = defaultColor;\n        this.picker = _tuiColorPicker2.default.create({\n            container: this.pickerElement,\n            preset: PICKER_COLOR,\n            color: defaultColor,\n            usageStatistics: this.usageStatistics\n        });\n\n        this._addEvent(colorpickerElement);\n    }\n\n    /**\n     * Get color\n     * @returns {Number} color value\n     */\n\n\n    _createClass(Colorpicker, [{\n        key: '_changeColorElement',\n\n\n        /**\n         * Change color element\n         * @param {string} color color value\n         * #private\n         */\n        value: function _changeColorElement(color) {\n            if (color) {\n                this.colorElement.classList.remove('transparent');\n                this.colorElement.style.backgroundColor = color;\n            } else {\n                this.colorElement.style.backgroundColor = '#fff';\n                this.colorElement.classList.add('transparent');\n            }\n        }\n\n        /**\n         * Make picker button element\n         * @param {HTMLElement} colorpickerElement color picker element\n         * @param {string} defaultColor color value\n         * @private\n         */\n\n    }, {\n        key: '_makePickerButtonElement',\n        value: function _makePickerButtonElement(colorpickerElement, defaultColor) {\n            colorpickerElement.classList.add('tui-image-editor-button');\n\n            this.colorElement = document.createElement('div');\n            this.colorElement.className = 'color-picker-value';\n            if (defaultColor) {\n                this.colorElement.style.backgroundColor = defaultColor;\n            } else {\n                this.colorElement.classList.add('transparent');\n            }\n        }\n\n        /**\n         * Make picker layer element\n         * @param {HTMLElement} colorpickerElement color picker element\n         * @param {string} title picker title\n         * @private\n         */\n\n    }, {\n        key: '_makePickerLayerElement',\n        value: function _makePickerLayerElement(colorpickerElement, title) {\n            var label = document.createElement('label');\n            var triangle = document.createElement('div');\n\n            this.pickerControl = document.createElement('div');\n            this.pickerControl.className = 'color-picker-control';\n\n            this.pickerElement = document.createElement('div');\n            this.pickerElement.className = 'color-picker';\n\n            label.innerHTML = title;\n            triangle.className = 'triangle';\n\n            this.pickerControl.appendChild(this.pickerElement);\n            this.pickerControl.appendChild(triangle);\n\n            colorpickerElement.appendChild(this.pickerControl);\n            colorpickerElement.appendChild(this.colorElement);\n            colorpickerElement.appendChild(label);\n        }\n\n        /**\n         * Add event\n         * @param {HTMLElement} colorpickerElement color picker element\n         * @private\n         */\n\n    }, {\n        key: '_addEvent',\n        value: function _addEvent(colorpickerElement) {\n            var _this = this;\n\n            this.picker.on('selectColor', function (value) {\n                _this._changeColorElement(value.color);\n                _this._color = value.color;\n                _this.fire('change', value.color);\n            });\n            colorpickerElement.addEventListener('click', function (event) {\n                var target = event.target;\n\n                var isInPickerControl = target && _this._isElementInColorPickerControl(target);\n\n                if (!isInPickerControl || isInPickerControl && _this._isPaletteButton(target)) {\n                    _this._show = !_this._show;\n                    _this.pickerControl.style.display = _this._show ? 'block' : 'none';\n                    _this._setPickerControlPosition();\n                    _this.fire('changeShow', _this);\n                }\n                event.stopPropagation();\n            });\n            document.body.addEventListener('click', function () {\n                _this.hide();\n            });\n        }\n\n        /**\n         * Check hex input or not\n         * @param {Element} target - Event target element\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isPaletteButton',\n        value: function _isPaletteButton(target) {\n            return target.className === 'tui-colorpicker-palette-button';\n        }\n\n        /**\n         * Check given element is in pickerControl element\n         * @param {Element} element - element to check\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isElementInColorPickerControl',\n        value: function _isElementInColorPickerControl(element) {\n            var parentNode = element;\n\n            while (parentNode !== document.body) {\n                if (!parentNode) {\n                    break;\n                }\n\n                if (parentNode === this.pickerControl) {\n                    return true;\n                }\n\n                parentNode = parentNode.parentNode;\n            }\n\n            return false;\n        }\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this._show = false;\n            this.pickerControl.style.display = 'none';\n        }\n\n        /**\n         * Set picker control position\n         * @private\n         */\n\n    }, {\n        key: '_setPickerControlPosition',\n        value: function _setPickerControlPosition() {\n            var controlStyle = this.pickerControl.style;\n            var halfPickerWidth = this._colorpickerElement.clientWidth / 2 + 2;\n            var left = this.pickerControl.offsetWidth / 2 - halfPickerWidth;\n            var top = (this.pickerControl.offsetHeight + 10) * -1;\n\n            if (this._toggleDirection === 'down') {\n                top = 30;\n            }\n\n            controlStyle.top = top + 'px';\n            controlStyle.left = '-' + left + 'px';\n        }\n    }, {\n        key: 'color',\n        get: function get() {\n            return this._color;\n        }\n\n        /**\n         * Set color\n         * @param {string} color color value\n         */\n        ,\n        set: function set(color) {\n            this._color = color;\n            this._changeColorElement(color);\n        }\n    }]);\n\n    return Colorpicker;\n}();\n\n_tuiCodeSnippet2.default.CustomEvents.mixin(Colorpicker);\nexports.default = Colorpicker;\n\n//# sourceURL=webpack://tui.ImageEditor/./src/js/ui/tools/colorpicker.js?");
 
 /***/ }),
 
